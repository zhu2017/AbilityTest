package com.ustcinfo.mobile.platform.ability.jsbridge;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.provider.MediaStore;

import com.alibaba.fastjson.JSONObject;
import com.sdsmdg.tastytoast.TastyToast;
import com.ustcinfo.mobile.platform.ability.event.WebViewEvent;
import com.ustcinfo.mobile.platform.ability.qrcode.CaptureActivity;
import com.ustcinfo.mobile.platform.ability.utils.Path;

import org.greenrobot.eventbus.EventBus;

import java.io.File;

import me.nereo.multi_image_selector.MultiImageSelector;
import top.zibin.luban.Luban;
import top.zibin.luban.OnCompressListener;

/**
 * Created by SunChao on 2017/10/26.
 */

public class JsMethodAdapter {

    private static JsMethodAdapter mInstance;

    private BridgeWebView webView;
    public static final String CODE = "CODE";

    private static final int REQUEST_TAKE_PHOTO = 0x111;
    private static final int REQUEST_PICK_PHOTO = 0x112;
    private static final int REQUEST_CODE = 0x113;

    private CallBackFunction callBackFunction;
    private String photoName;

    private JsMethodAdapter(BridgeWebView webView) {
        this.webView = webView;
    }

    public static JsMethodAdapter getmInstance() {
        return mInstance;
    }

    public static void register(BridgeWebView webView) {
        if (mInstance == null) {
            mInstance = new JsMethodAdapter(webView);
        }
        mInstance.init();
    }


    private void init() {
        registerGetUserInfos();
        registerTakePhotos();
        registerBarCode();
        registerPickPic();

    }

    /**
     * getUserInfos 获取用户信息
     */
    private void registerGetUserInfos() {
        webView.registerHandler("getUserInfos", new BridgeHandler() {
            @Override
            public void handler(String data, CallBackFunction function) {
                WebViewEvent event = new WebViewEvent();
                event.webView = webView;
                event.key = "getUserInfos";
                event.callBackFunction = function;
                EventBus.getDefault().post(event);
            }
        });
    }


    private void registerTakePhotos() {
        webView.registerHandler("takePhoto", new BridgeHandler() {
            @Override
            public void handler(String data, CallBackFunction function) {
                Intent intent = new Intent();
                intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);
                photoName = System.currentTimeMillis() + ".jpg";
                File f = new File(Path.PATH_DOWNLOAD_IMG);
                if(!f.exists())f.mkdirs();
                File file = new File(Path.PATH_DOWNLOAD_IMG, photoName);
                Uri uri = Uri.fromFile(file);
                intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);
                ((Activity) webView.getContext()).startActivityForResult(intent, REQUEST_TAKE_PHOTO);
            }
        });
    }

    private void registerPickPic() {
        webView.registerHandler("pickPic", new BridgeHandler() {
            @Override
            public void handler(String data, CallBackFunction function) {
                JSONObject jsonObject = JSONObject.parseObject(data);
                MultiImageSelector.create()
                        .showCamera(false)
                        .count(jsonObject.getIntValue("picNum"))
                        .start((Activity) webView.getContext(), REQUEST_PICK_PHOTO);
            }
        });
    }


    private void registerBarCode() {
        webView.registerHandler("scanGetCode", new BridgeHandler() {
            @Override
            public void handler(String data, CallBackFunction function) {
                mInstance.callBackFunction = function;
                Intent intent = new Intent(webView.getContext(), CaptureActivity.class);
                ((Activity) webView.getContext()).startActivityForResult(intent, REQUEST_CODE);
            }
        });
    }


    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (resultCode == Activity.RESULT_OK)
            switch (requestCode) {
                case REQUEST_TAKE_PHOTO:
                    Luban.with(webView.getContext())
                            .load(new File(Path.PATH_DOWNLOAD_IMG, photoName))                                   // 传人要压缩的图片列表
                            .ignoreBy(100)                                  // 忽略不压缩图片的大小
                            .setTargetDir(Path.PATH_DOWNLOAD_IMG + photoName)                        // 设置压缩后文件存储位置
                            .setCompressListener(new OnCompressListener() { //设置回调
                                @Override
                                public void onStart() {
                                    TastyToast.makeText(webView.getContext(), "start", TastyToast.LENGTH_SHORT, TastyToast.WARNING);
                                }

                                @Override
                                public void onSuccess(File file) {
                                    // TODO 压缩成功后调用，返回压缩后的图片文件
                                    TastyToast.makeText(webView.getContext(), "onSuccess", TastyToast.LENGTH_SHORT, TastyToast.SUCCESS);
                                }

                                @Override
                                public void onError(Throwable e) {
                                    TastyToast.makeText(webView.getContext(), e.getMessage(), TastyToast.LENGTH_SHORT, TastyToast.ERROR);
                                }
                            }).launch();    //启动压缩
                    break;
                case REQUEST_PICK_PHOTO:
                    break;

                case REQUEST_CODE:
                    JSONObject json = new JSONObject();
                    json.put("data", data.getStringExtra(CODE));
                    mInstance.callBackFunction.onCallBack(json.toJSONString());
                    break;


            }
    }


}
